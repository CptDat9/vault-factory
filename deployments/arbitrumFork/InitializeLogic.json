{
  "address": "0x6eeb3589aAe74539dA975b0017Fc7AFAB643618b",
  "abi": [],
  "transactionHash": "0x6679ed0136e4e681f843a44c1886f42dacf65593655de726aac28efccd451ff3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x6eeb3589aAe74539dA975b0017Fc7AFAB643618b",
    "transactionIndex": 0,
    "gasUsed": "113617",
    "logsBloom": "0x
    "blockHash": "0xfb807e1acc3be16aaa2a87a88a2bb43e99d60d5544fc698df86a12ff25071082",
    "transactionHash": "0x6679ed0136e4e681f843a44c1886f42dacf65593655de726aac28efccd451ff3",
    "logs": [],
    "blockNumber": 370367848,
    "cumulativeGasUsed": "113617",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "564f110c153dee3f0c216c315af95c2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/libraries/logic/InitializeLogic.sol\":\"InitializeLogic\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC-4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x7b6690c21e94a45b825631a12581b40a753ea827de5ac9127a6b5833411317f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\r\\n\\r\\ninterface IVault is IERC4626 {\\r\\n    // Enums\\r\\n    enum StrategyChangeType {\\r\\n        ADDED,\\r\\n        REVOKED\\r\\n    }\\r\\n\\r\\n    event Deposited(address indexed user, uint256 amount, uint256 shares);\\r\\n    event RequestedWithdraw(address indexed user, uint256 shares);\\r\\n    event Withdrawn(\\r\\n        address indexed user,\\r\\n        uint256 shares,\\r\\n        uint256 amount,\\r\\n        uint256 fee\\r\\n    );\\r\\n    event TreasuryTransferred();\\r\\n    event RateUpdated(uint256 oldRate, uint256 newRate);\\r\\n    event GovernmentChanged(address newGovernment);\\r\\n    event FeeUpdated(uint256 oldFee, uint256 newFee);\\r\\n    event StrategyChanged(\\r\\n        address indexed strategy,\\r\\n        StrategyChangeType changeType\\r\\n    );\\r\\n    event StrategyReported(\\r\\n        address indexed strategy,\\r\\n        uint256 gain,\\r\\n        uint256 loss,\\r\\n        uint256 currentDebt,\\r\\n        uint256 performanceFee,\\r\\n        uint256 refund\\r\\n    );\\r\\n    event DebtUpdated(\\r\\n        address indexed strategy,\\r\\n        uint256 currentDebt,\\r\\n        uint256 newDebt\\r\\n    );\\r\\n    event UpdateAccountant(address indexed accountant);\\r\\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\\r\\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\\r\\n    event UpdateDefaultQueue(address[] newDefaultQueue);\\r\\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\\r\\n    event UpdateAutoAllocate(bool autoAllocate);\\r\\n    event UpdateDepositLimit(uint256 depositLimit);\\r\\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\\r\\n    event UpdateManagementFee(uint256 managementFee);\\r\\n    event UpdateFeeRecipient(address feeRecipient);\\r\\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\r\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\r\\n    event ManagementFeeMinted(address indexed feeRecipient, uint256 amount);\\r\\n\\r\\n    function mint(address receiver, uint256 assets) external;\\r\\n\\r\\n    function burn(address receiver, uint256 assets) external;\\r\\n\\r\\n    function spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function deposit(\\r\\n        uint256 assets,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n    function withdraw(\\r\\n        uint256 shares,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) external returns (uint256);\\r\\n    function maxDeposit(address receiver) external view returns (uint256);\\r\\n    function maxWithdraw(address owner) external view returns (uint256);\\r\\n    function maxWithdraw(\\r\\n        address owner,\\r\\n        uint256 maxLoss,\\r\\n        address[] memory _strategies\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8213e57dca1c723e28952a5d35cae3d48d8881b256c0c62666191d73284a3cbd\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nlibrary Constants {\\r\\n    uint256 public constant MAX_QUEUE = 20;\\r\\n    string public constant API_VERSION = \\\"0.0.1\\\";\\r\\n    uint256 public constant MAX_PROFIT_UNLOCK_TIME = 365 days;\\r\\n    uint256 public constant MAX_BPS = 10_000;\\r\\n    uint256 public constant MAX_BPS_EXTENDED = 1_000_000_000_000;\\r\\n\\r\\n    uint256 public constant YEAR = 365 * 24 * 60 * 60;\\r\\n\\r\\n    bytes32 public constant ROLE_GOVERNANCE_MANAGER =\\r\\n        keccak256(\\\"ROLE_GOVERNANCE_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_ADD_STRATEGY_MANAGER =\\r\\n        keccak256(\\\"ROLE_ADD_STRATEGY_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_REVOKE_STRATEGY_MANAGER =\\r\\n        keccak256(\\\"ROLE_REVOKE_STRATEGY_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_ACCOUNTANT_MANAGER =\\r\\n        keccak256(\\\"ROLE_ACCOUNTANT_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_QUEUE_MANAGER =\\r\\n        keccak256(\\\"ROLE_QUEUE_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_REPORTING_MANAGER =\\r\\n        keccak256(\\\"ROLE_REPORTING_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_DEBT_MANAGER = keccak256(\\\"ROLE_DEBT_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_MAX_DEBT_MANAGER =\\r\\n        keccak256(\\\"ROLE_MAX_DEBT_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_DEPOSIT_LIMIT_MANAGER =\\r\\n        keccak256(\\\"ROLE_DEPOSIT_LIMIT_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_WITHDRAW_LIMIT_MANAGER =\\r\\n        keccak256(\\\"ROLE_WITHDRAW_LIMIT_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_MINIMUM_IDLE_MANAGER =\\r\\n        keccak256(\\\"ROLE_MINIMUM_IDLE_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_PROFIT_UNLOCK_MANAGER =\\r\\n        keccak256(\\\"ROLE_PROFIT_UNLOCK_MANAGER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_DEBT_PURCHASER =\\r\\n        keccak256(\\\"ROLE_DEBT_PURCHASER\\\");\\r\\n\\r\\n    bytes32 public constant ROLE_EMERGENCY_MANAGER =\\r\\n        keccak256(\\\"ROLE_EMERGENCY_MANAGER\\\");\\r\\n}\\r\\n\",\"keccak256\":\"0xe1dc86466d9f17f7559cb634cdefa15f2437e7732a7054145037789aade502f9\",\"license\":\"MIT\"},\"contracts/protocol/libraries/logic/InitializeLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\nimport {Constants} from \\\"../Constants.sol\\\";\\r\\nimport {IVault} from \\\"../../../interfaces/IVault.sol\\\";\\r\\n\\r\\nlibrary InitializeLogic {\\r\\n    using InitializeLogic for DataTypes.VaultData;\\r\\n\\r\\n    function ExecuteInitialize(\\r\\n        DataTypes.VaultData storage vault,\\r\\n        uint256 _profitMaxUnlockTime\\r\\n    ) external {\\r\\n        require(\\r\\n            _profitMaxUnlockTime <= Constants.MAX_PROFIT_UNLOCK_TIME,\\r\\n            \\\"Profit unlock time too long\\\"\\r\\n        );\\r\\n        vault.addressVault = address(this);\\r\\n        vault.profitMaxUnlockTime = _profitMaxUnlockTime;\\r\\n        vault.useDefaultQueue = true;\\r\\n        vault.depositLimit = type(uint256).max;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae772f92ca921d0cb3f7d493ee06d5117ce8fd892f9b79ca9ed158f0de781f4d\",\"license\":\"MIT\"},\"contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct StrategyData {\\r\\n        uint256 activation;\\r\\n        uint256 lastReport;\\r\\n        uint256 currentDebt;\\r\\n        uint256 maxDebt;\\r\\n    }\\r\\n\\r\\n    struct VaultData {\\r\\n        address addressVault;\\r\\n        uint256 totalDebt;\\r\\n        uint256 totalIdle;\\r\\n        // strategy\\r\\n        mapping(address => StrategyData) strategies;\\r\\n        address[] defaultQueue;\\r\\n        bool useDefaultQueue;\\r\\n        bool autoAllocate;\\r\\n        // limit\\r\\n        uint256 minimumTotalIdle;\\r\\n        uint256 depositLimit;\\r\\n        // profit unlocking\\r\\n        uint256 profitMaxUnlockTime;\\r\\n        uint256 fullProfitUnlockDate;\\r\\n        uint256 profitUnlockingRate;\\r\\n        uint256 lastProfitUpdate;\\r\\n        // modules\\r\\n        address accountant;\\r\\n        address depositLimitModule;\\r\\n        address withdrawLimitModule;\\r\\n        // management fee\\r\\n        address feeRecipient;\\r\\n        uint256 managementFee;\\r\\n        uint256 lastTimeTakeManagementFee;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb483466fa51ecdee9cc339279f3967baf71c03b5e0b9f5378e38e3bbc820149f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c57610118908161002282393081602b0152f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c638e5f138414602857600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001460de57604036600319011260de5760043590602435906301e133808211609c575081546001600160a01b03191630178255600882015560058101805460ff1916600117905560001960079091015580f35b62461bcd60e51b815260206004820152601b60248201527f50726f66697420756e6c6f636b2074696d6520746f6f206c6f6e6700000000006044820152606490fd5b5080fdfea2646970667358221220c0e64fff1bd9b3e529b2eae6121eba77a7e19f9540fc7ad948684bd0808765f664736f6c63430008180033",
  "deployedBytecode": "0x6080806040526004361015601257600080fd5b600090813560e01c638e5f138414602857600080fd5b307f00000000000000000000000000000000000000000000000000000000000000001460de57604036600319011260de5760043590602435906301e133808211609c575081546001600160a01b03191630178255600882015560058101805460ff1916600117905560001960079091015580f35b62461bcd60e51b815260206004820152601b60248201527f50726f66697420756e6c6f636b2074696d6520746f6f206c6f6e6700000000006044820152606490fd5b5080fdfea2646970667358221220c0e64fff1bd9b3e529b2eae6121eba77a7e19f9540fc7ad948684bd0808765f664736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}